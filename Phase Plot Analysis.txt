from scipy.signal import find_peaks
# Create current clamp for stimulation
stim = h.IClamp(soma(0.5))
stim.delay = 50   # ms
stim.dur = 100     # ms
stim.amp = 0.2    # nA 

# Set up recording vectors
t_vec = h.Vector()
v_vec = h.Vector()

t_vec.record(h._ref_t)
v_vec.record(soma(0.5)._ref_v)

# Set simulation parameters
h.dt = 0.025  # ms
h.tstop = 150  # ms
h.v_init = -68.59  # mV

# Run simulation
h.run()

# Convert to numpy arrays
time = np.array(t_vec)
voltage = np.array(v_vec)

# Calculate dV/dt numerically
dt = time[1] - time[0]
dvdt = np.gradient(voltage, dt)

# Calculate d2V/dt2 (second derivative)
d2vdt2 = np.gradient(dvdt, dt)

def find_ap_threshold(voltage, dvdt, d2vdt2, time, method='dvdt_threshold'):
    """
    Find action potential threshold using different methods
    
    Methods:
    1. 'dvdt_threshold': dV/dt exceeds a threshold (e.g., 20 mV/ms)
    2. 'dvdt_peak': First local maximum in dV/dt during depolarization
    3. 'second_derivative': Where d2V/dt2 reaches maximum (inflection point)
    4. 'fixed_voltage': Simple voltage threshold (e.g., -40 mV)
    """
    
    thresholds = {}
    
    # Method 1: dV/dt threshold (most common)
    dvdt_thresh = 20  # mV/ms
    dvdt_crossings = np.where(dvdt > dvdt_thresh)[0]
    if len(dvdt_crossings) > 0:
        thresh_idx = dvdt_crossings[0]
        thresholds['dvdt_threshold'] = {
            'voltage': voltage[thresh_idx],
            'time': time[thresh_idx],
            'dvdt': dvdt[thresh_idx],
            'index': thresh_idx
        }
    
    # Method 2: First local maximum in dV/dt
    # Find peaks in dV/dt that are above baseline
    
    dvdt_peaks, _ = find_peaks(dvdt, height=5, distance=int(1/dt))  # At least 1ms apart
    if len(dvdt_peaks) > 0:
        first_peak_idx = dvdt_peaks[0]
        thresholds['dvdt_peak'] = {
            'voltage': voltage[first_peak_idx],
            'time': time[first_peak_idx],
            'dvdt': dvdt[first_peak_idx],
            'index': first_peak_idx
        }
    
    # Method 3: Maximum second derivative (inflection point)
    # Find where acceleration is maximum during upstroke
    stim_start_idx = int(stim.delay / dt)
    search_window = slice(stim_start_idx, stim_start_idx + int(20/dt))  # Search 20ms after stim
    d2v_in_window = d2vdt2[search_window]
    if len(d2v_in_window) > 0:
        max_d2v_rel_idx = np.argmax(d2v_in_window)
        max_d2v_idx = search_window.start + max_d2v_rel_idx
        thresholds['second_derivative'] = {
            'voltage': voltage[max_d2v_idx],
            'time': time[max_d2v_idx],
            'dvdt': dvdt[max_d2v_idx],
            'd2vdt2': d2vdt2[max_d2v_idx],
            'index': max_d2v_idx
        }
    
    # Method 4: Fixed voltage threshold
    voltage_thresh = -40  # mV
    v_crossings = np.where((voltage[:-1] < voltage_thresh) & (voltage[1:] >= voltage_thresh))[0]
    if len(v_crossings) > 0:
        thresh_idx = v_crossings[0]
        thresholds['fixed_voltage'] = {
            'voltage': voltage[thresh_idx],
            'time': time[thresh_idx],
            'dvdt': dvdt[thresh_idx],
            'index': thresh_idx
        }
    
    return thresholds

# Find thresholds using different methods
ap_thresholds = find_ap_threshold(voltage, dvdt, d2vdt2, time)

# Create comprehensive plot
fig, axes = plt.subplots(2, 2, figsize=(15, 12))

# Main phase plot with thresholds
ax1 = axes[0, 0]
ax1.plot(voltage, dvdt, 'b-', linewidth=1, label='Phase trajectory')
ax1.scatter(voltage[0], dvdt[0], color='green', s=50, label='Start', zorder=3)
ax1.scatter(voltage[-1], dvdt[-1], color='red', s=50, label='End', zorder=3)

# Plot threshold points
colors = ['orange', 'purple', 'brown', 'pink']
markers = ['o', 's', '^', 'D']
for i, (method, thresh_data) in enumerate(ap_thresholds.items()):
    ax1.scatter(thresh_data['voltage'], thresh_data['dvdt'], 
               color=colors[i], s=80, marker=markers[i], 
               label=f'{method.replace("_", " ").title()}', zorder=4)

ax1.set_xlabel('Membrane Potential (mV)')
ax1.set_ylabel('dV/dt (mV/ms)')
ax1.set_title('Phase Portrait with AP Thresholds')
ax1.grid(True, alpha=0.3)
ax1.legend()

# Voltage time series with thresholds
ax2 = axes[0, 1]
ax2.plot(time, voltage, 'b-', linewidth=1.5, label='Voltage')
for i, (method, thresh_data) in enumerate(ap_thresholds.items()):
    ax2.axvline(thresh_data['time'], color=colors[i], linestyle='--', alpha=0.7)
    ax2.scatter(thresh_data['time'], thresh_data['voltage'], 
               color=colors[i], s=60, marker=markers[i], zorder=3)

ax2.set_xlabel('Time (ms)')
ax2.set_ylabel('Membrane Potential (mV)')
ax2.set_title('Voltage Time Series with Thresholds')
ax2.grid(True, alpha=0.3)

# dV/dt time series with threshold line
ax3 = axes[1, 0]
ax3.plot(time, dvdt, 'r-', linewidth=1.5, label='dV/dt')
ax3.axhline(20, color='orange', linestyle=':', alpha=0.7, label='dV/dt threshold (20 mV/ms)')
for i, (method, thresh_data) in enumerate(ap_thresholds.items()):
    ax3.scatter(thresh_data['time'], thresh_data['dvdt'], 
               color=colors[i], s=60, marker=markers[i], zorder=3)

ax3.set_xlabel('Time (ms)')
ax3.set_ylabel('dV/dt (mV/ms)')
ax3.set_title('dV/dt Time Series')
ax3.grid(True, alpha=0.3)
ax3.legend()

# Second derivative
ax4 = axes[1, 1]
ax4.plot(time, d2vdt2, 'g-', linewidth=1.5, label='d²V/dt²')
if 'second_derivative' in ap_thresholds:
    thresh_data = ap_thresholds['second_derivative']
    ax4.scatter(thresh_data['time'], thresh_data['d2vdt2'], 
               color='brown', s=60, marker='^', zorder=3, label='Max d²V/dt²')
ax4.set_xlabel('Time (ms)')
ax4.set_ylabel('d²V/dt² (mV/ms²)')
ax4.set_title('Second Derivative (Acceleration)')
ax4.grid(True, alpha=0.3)
ax4.legend()

plt.tight_layout()
plt.show()

# Print threshold results
print("=" * 60)
print("ACTION POTENTIAL THRESHOLD ANALYSIS")
print("=" * 60)

if ap_thresholds:
    for method, thresh_data in ap_thresholds.items():
        print(f"\n{method.replace('_', ' ').title()} Method:")
        print(f"  Threshold voltage: {thresh_data['voltage']:.2f} mV")
        print(f"  Time: {thresh_data['time']:.2f} ms")
        print(f"  dV/dt at threshold: {thresh_data['dvdt']:.2f} mV/ms")
        if 'd2vdt2' in thresh_data:
            print(f"  d²V/dt² at threshold: {thresh_data['d2vdt2']:.2f} mV/ms²")
else:
    print("No action potential detected. Try increasing stimulus amplitude.")

print(f"\nSimulation Statistics:")
print(f"Time range: {time[0]:.1f} - {time[-1]:.1f} ms")
print(f"Voltage range: {voltage.min():.1f} - {voltage.max():.1f} mV")
print(f"Max dV/dt: {dvdt.max():.1f} mV/ms")
print(f"Min dV/dt: {dvdt.min():.1f} mV/ms")

# Save comprehensive data
np.savez('neuron_threshold_data.npz', 
         time=time, 
         voltage=voltage, 
         dvdt=dvdt,
         d2vdt2=d2vdt2,
         thresholds=ap_thresholds,
         stim_amp=stim.amp,
         stim_delay=stim.delay,
         stim_dur=stim.dur)
		 
		 

============================================================
ACTION POTENTIAL THRESHOLD ANALYSIS
============================================================

Dvdt Threshold Method:
  Threshold voltage: -46.26 mV
  Time: 60.93 ms
  dV/dt at threshold: 22.11 mV/ms

Dvdt Peak Method:
  Threshold voltage: -68.71 mV
  Time: 50.03 ms
  dV/dt at threshold: 13.28 mV/ms

Second Derivative Method:
  Threshold voltage: -21.40 mV
  Time: 61.20 ms
  dV/dt at threshold: 318.95 mV/ms
  d²V/dt² at threshold: 3474.04 mV/ms²

Fixed Voltage Method:
  Threshold voltage: -40.70 mV
  Time: 61.08 ms
  dV/dt at threshold: 65.11 mV/ms

Simulation Statistics:
Time range: 0.0 - 150.0 ms
Voltage range: -72.3 - 40.5 mV
Max dV/dt: 455.9 mV/ms
Min dV/dt: -53.0 mV/ms
